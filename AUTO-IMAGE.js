(async () => {
  const CONFIG = {
    COOLDOWN_DEFAULT: 31000,
    TRANSPARENCY_THRESHOLD: 100,
    WHITE_THRESHOLD: 250,
    LOG_INTERVAL: 10,
    THEME: {
      primary: '#000000',
      secondary: '#111111',
      accent: '#222222',
      text: '#ffffff',
      highlight: '#775ce3',
      success: '#00ff00',
      error: '#ff0000',
      warning: '#ffaa00'
    }
  };

  const TEXTS = {
    pt: {
      title: "WPlace Auto-Image",
      initBot: "Iniciar Auto-BOT",
      uploadImage: "Upload da Imagem",
      resizeImage: "Redimensionar Imagem",
      selectPosition: "Selecionar Posi√ß√£o",
      startPainting: "Iniciar Pintura",
      stopPainting: "Parar Pintura",
      checkingColors: "üîç Verificando cores dispon√≠veis...",
      noColorsFound: "‚ùå Abra a paleta de cores no site e tente novamente!",
      colorsFound: "‚úÖ {count} cores dispon√≠veis encontradas",
      loadingImage: "üñºÔ∏è Carregando imagem...",
      imageLoaded: "‚úÖ Imagem carregada com {count} pixels v√°lidos",
      imageError: "‚ùå Erro ao carregar imagem",
      selectPositionAlert: "Pinte o primeiro pixel na localiza√ß√£o onde deseja que a arte comece!",
      waitingPosition: "üëÜ Aguardando voc√™ pintar o pixel de refer√™ncia...",
      positionSet: "‚úÖ Posi√ß√£o definida com sucesso!",
      positionTimeout: "‚ùå Tempo esgotado para selecionar posi√ß√£o",
      startPaintingMsg: "üé® Iniciando pintura...",
      paintingProgress: "üß± Progresso: {painted}/{total} pixels...",
      noCharges: "‚åõ Sem cargas. Aguardando {time}...",
      paintingStopped: "‚èπÔ∏è Pintura interrompida pelo usu√°rio",
      paintingComplete: "‚úÖ Pintura conclu√≠da! {count} pixels pintados.",
      paintingError: "‚ùå Erro durante a pintura",
      missingRequirements: "‚ùå Carregue uma imagem e selecione uma posi√ß√£o primeiro",
      progress: "Progresso",
      pixels: "Pixels",
      charges: "Cargas",
      estimatedTime: "Tempo estimado",
      initMessage: "Clique em 'Iniciar Auto-BOT' para come√ßar",
      waitingInit: "Aguardando inicializa√ß√£o...",
      resizeSuccess: "‚úÖ Imagem redimensionada para {width}x{height}",
      paintingPaused: "‚è∏Ô∏è Pintura pausada na posi√ß√£o X: {x}, Y: {y}"
    },
    en: {
      title: "WPlace Auto-Image",
      initBot: "Start Auto-BOT",
      uploadImage: "Upload Image",
      resizeImage: "Resize Image",
      selectPosition: "Select Position",
      startPainting: "Start Painting",
      stopPainting: "Stop Painting",
      checkingColors: "üîç Checking available colors...",
      noColorsFound: "‚ùå Open the color palette on the site and try again!",
      colorsFound: "‚úÖ {count} available colors found",
      loadingImage: "üñºÔ∏è Loading image...",
      imageLoaded: "‚úÖ Image loaded with {count} valid pixels",
      imageError: "‚ùå Error loading image",
      selectPositionAlert: "Paint the first pixel at the location where you want the art to start!",
      waitingPosition: "üëÜ Waiting for you to paint the reference pixel...",
      positionSet: "‚úÖ Position set successfully!",
      positionTimeout: "‚ùå Timeout for position selection",
      startPaintingMsg: "üé® Starting painting...",
      paintingProgress: "üß± Progress: {painted}/{total} pixels...",
      noCharges: "‚åõ No charges. Waiting {time}...",
      paintingStopped: "‚èπÔ∏è Painting stopped by user",
      paintingComplete: "‚úÖ Painting complete! {count} pixels painted.",
      paintingError: "‚ùå Error during painting",
      missingRequirements: "‚ùå Load an image and select a position first",
      progress: "Progress",
      pixels: "Pixels",
      charges: "Charges",
      estimatedTime: "Estimated time",
      initMessage: "Click 'Start Auto-BOT' to begin",
      waitingInit: "Waiting for initialization...",
      resizeSuccess: "‚úÖ Image resized to {width}x{height}",
      paintingPaused: "‚è∏Ô∏è Painting paused at position X: {x}, Y: {y}"
    },
    fr: {
      title: "WPlace Auto-Image",
      initBot: "D√©marrer Auto-BOT",
      uploadImage: "T√©l√©charger l'image",
      resizeImage: "Redimensionner l'image",
      selectPosition: "S√©lectionner la position",
      startPainting: "Commencer la peinture",
      stopPainting: "Arr√™ter la peinture",
      checkingColors: "üîç V√©rification des couleurs disponibles...",
      noColorsFound: "‚ùå Ouvrez la palette de couleurs sur le site et r√©essayez !",
      colorsFound: "‚úÖ {count} couleurs disponibles trouv√©es",
      loadingImage: "üñºÔ∏è Chargement de l'image...",
      imageLoaded: "‚úÖ Image charg√©e avec {count} pixels valides",
      imageError: "‚ùå Erreur lors du chargement de l'image",
      selectPositionAlert: "Peignez le premier pixel √† l‚Äôendroit o√π vous souhaitez commencer l‚Äôart !",
      waitingPosition: "üëÜ En attente que vous peigniez le pixel de r√©f√©rence...",
      positionSet: "‚úÖ Position d√©finie avec succ√®s !",
      positionTimeout: "‚ùå Temps √©coul√© pour la s√©lection de la position",
      startPaintingMsg: "üé® D√©but de la peinture...",
      paintingProgress: "üß± Progression : {painted}/{total} pixels...",
      noCharges: "‚åõ Pas de charges. Attente de {time}...",
      paintingStopped: "‚èπÔ∏è Peinture arr√™t√©e par l‚Äôutilisateur",
      paintingComplete: "‚úÖ Peinture termin√©e ! {count} pixels peints.",
      paintingError: "‚ùå Erreur pendant la peinture",
      missingRequirements: "‚ùå Veuillez d'abord t√©l√©charger une image et s√©lectionner une position",
      progress: "Progression",
      pixels: "Pixels",
      charges: "Charges",
      estimatedTime: "Temps estim√©",
      initMessage: "Cliquez sur 'D√©marrer Auto-BOT' pour commencer",
      waitingInit: "En attente de l'initialisation...",
      resizeSuccess: "‚úÖ Image redimensionn√©e √† {width}x{height}",
      paintingPaused: "‚è∏Ô∏è Peinture en pause √† la position X : {x}, Y : {y}"
    },
    ru: {
      title: "WPlace Auto-Image",
      initBot: "–ó–∞–ø—É—Å—Ç–∏—Ç—å Auto-BOT",
      uploadImage: "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
      resizeImage: "–ò–∑–º–µ–Ω–∏—Ç—å –†–∞–∑–º–µ—Ä",
      selectPosition: "–í—ã–±—Ä–∞—Ç—å –ü–æ–∑–∏—Ü–∏—é",
      startPainting: "–ù–∞—á–∞—Ç—å –†–∏—Å–æ–≤–∞–Ω–∏–µ",
      stopPainting: "–ó–∞–≤–µ—Ä—à–∏—Ç—å –†–∏—Å–æ–≤–∞–Ω–∏–µ",
      checkingColors: "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤...",
      noColorsFound: "‚ùå –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–ª–∏—Ç—Ä—É —Ü–≤–µ—Ç–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
      colorsFound: "‚úÖ {count} –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤",
      loadingImage: "üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...",
      imageLoaded: "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å {count} –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π",
      imageError: "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
      selectPositionAlert: "–ù–∞—Ä–∏—Å—É–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–∏–∫—Å–µ–ª—å –≤ —Ç–æ–º –º–µ—Å—Ç–µ, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∏–Ω–∞–ª—Å—è –∞—Ä—Ç.!",
      waitingPosition: "üëÜ –ñ–¥–µ–º, –∫–æ–≥–¥–∞ –≤—ã –Ω–∞—Ä–∏—Å—É–µ—Ç–µ –æ–ø–æ—Ä–Ω—ã–π –ø–∏–∫—Å–µ–ª—å...",
      positionSet: "‚úÖ –ü–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
      positionTimeout: "‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤—ã—à–ª–æ",
      startPaintingMsg: "üé® –ù–∞—á–∏–Ω–∞–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å...",
      paintingProgress: "üß± –ü—Ä–æ–≥—Ä–µ—Å—Å: {painted}/{total} –ø–∏–∫—Å–µ–ª–µ–π...",
      noCharges: "‚åõ –ù–µ—Ç –∑–∞—Ä—è–¥–æ–≤. –æ–∂–∏–¥–∞–Ω–∏–µ {time}...",
      paintingStopped: "‚èπÔ∏è –†–∏—Å–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
      paintingComplete: "‚úÖ –†–∏—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! {count} –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–æ.",
      paintingError: "‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∏—Å–æ–≤–∞–Ω–∏–µ",
      missingRequirements: "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é",
      progress: "–ü—Ä–æ–≥—Ä–µ—Å—Å",
      pixels: "–ü–∏–∫—Å–µ–ª–∏",
      charges: "–ó–∞—Ä—è–¥—ã",
      estimatedTime: "–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è",
      initMessage: "–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø—É—Å—Ç–∏—Ç—å Auto-BOT¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
      waitingInit: "–û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...",
      resizeSuccess: "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –¥–æ {width}x{height}",
      paintingPaused: "‚è∏Ô∏è –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ X: {x}, Y: {y}"
    },
    nl: {
      title: "WPlaats Auto-Afbeelding",
      initBot: "Start Auto-BOT",
      uploadImage: "Upload Afbeelding",
      resizeImage: "Formaat Afbeelding Wijzigen",
      selectPosition: "Selecteer Positie",
      startPainting: "Start Schilderen",
      stopPainting: "Stop Schilderen",
      checkingColors: "üîç Beschikbare kleuren controleren...",
      noColorsFound: "‚ùå Open het kleurenpalet op de site en probeer het opnieuw!",
      colorsFound: "‚úÖ {count} beschikbare kleuren gevonden",
      loadingImage: "üñºÔ∏è Afbeelding laden...",
      imageLoaded: "‚úÖ Afbeelding geladen met {count} geldige pixels",
      imageError: "‚ùå Fout bij het laden van de afbeelding",
      selectPositionAlert: "Schilder de eerste pixel op de locatie waar je de afbeelding wilt laten beginnen!",
      waitingPosition: "üëÜ Wacht tot je de referentiepixel schildert...",
      positionSet: "‚úÖ Positie succesvol ingesteld!",
      positionTimeout: "‚ùå Time-out voor positieselectie",
      startPaintingMsg: "üé® Schilderen starten...",
      paintingProgress: "üß± Voortgang: {geschilderd}/{totaal} pixels...",
      noCharges: "‚åõ Geen kosten. Wachten {time}...",
      paintingStopped: "‚èπÔ∏è Schilderen gestopt door gebruiker",
      paintingComplete: "‚úÖ Schilderen voltooid! {count} pixels geschilderd.",
      paintingError: "‚ùå Fout tijdens het schilderen",
      missingRequirements: "‚ùå Laad een afbeelding en selecteer eerst een positie",
      progress: "Voortgang",
      pixels: "Pixels",
      charges: "Kosten",
      estimatedTime: "Geschatte tijd",
      initMessage: "Klik op 'Start Auto-BOT' om te beginnen",
      waitingInit: "Wachten op initialisatie...",
      resizeSuccess: "‚úÖ Afbeelding verkleind naar {breedte} x {hoogte}",
      paintingPaused: "‚è∏Ô∏è Schilderen gepauzeerd op positie X: {x}, Y: {y}"
    },
    uk: {
      title: "WPlace Auto-Image",
      initBot: "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞",
      uploadImage: "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
      resizeImage: "–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
      selectPosition: "–í–∏–±—Ä–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é",
      startPainting: "–ü–æ—á–∞—Ç–∏ –º–∞–ª—é–≤–∞–Ω–Ω—è",
      stopPainting: "–ó—É–ø–∏–Ω–∏—Ç–∏ –º–∞–ª—é–≤–∞–Ω–Ω—è",
      checkingColors: "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–ª—å–æ—Ä—ñ–≤...",
      noColorsFound: "‚ùå –í—ñ–¥–∫—Ä–∏–π—Ç–µ –ø–∞–ª—ñ—Ç—Ä—É –∫–æ–ª—å–æ—Ä—ñ–≤ –Ω–∞ —Å–∞–π—Ç—ñ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!",
      colorsFound: "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {count} –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–ª—å–æ—Ä—ñ–≤",
      loadingImage: "üñºÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...",
      imageLoaded: "‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ {count} –∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ –ø—ñ–∫—Å–µ–ª—è–º–∏",
      imageError: "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
      selectPositionAlert: "–ù–∞–º–∞–ª—é–π—Ç–µ –ø–µ—Ä—à–∏–π –ø—ñ–∫—Å–µ–ª—å —É –º—ñ—Å—Ü—ñ, –∑ —è–∫–æ–≥–æ –º–∞—î –ø–æ—á–∞—Ç–∏—Å—è –∞—Ä—Ç!",
      waitingPosition: "üëÜ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è, –ø–æ–∫–∏ –≤–∏ –Ω–∞–º–∞–ª—é—î—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∏–π –ø—ñ–∫—Å–µ–ª—å...",
      positionSet: "‚úÖ –ü–æ–∑–∏—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
      positionTimeout: "‚ùå –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó –≤–∏—á–µ—Ä–ø–∞–Ω–æ",
      startPaintingMsg: "üé® –ü–æ—á–∞—Ç–æ–∫ –º–∞–ª—é–≤–∞–Ω–Ω—è...",
      paintingProgress: "üß± –ü—Ä–æ–≥—Ä–µ—Å: {painted}/{total} –ø—ñ–∫—Å–µ–ª—ñ–≤...",
      noCharges: "‚åõ –ù–µ–º–∞—î –∑–∞—Ä—è–¥—ñ–≤. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è {time}...",
      paintingStopped: "‚èπÔ∏è –ú–∞–ª—é–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º",
      paintingComplete: "‚úÖ –ú–∞–ª—é–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞–º–∞–ª—å–æ–≤–∞–Ω–æ {count} –ø—ñ–∫—Å–µ–ª—ñ–≤.",
      paintingError: "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –º–∞–ª—é–≤–∞–Ω–Ω—è",
      missingRequirements: "‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ–∑–∏—Ü—ñ—é",
      progress: "–ü—Ä–æ–≥—Ä–µ—Å",
      pixels: "–ü—ñ–∫—Å–µ–ª—ñ",
      charges: "–ó–∞—Ä—è–¥–∏",
      estimatedTime: "–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å",
      initMessage: "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞¬ª, —â–æ–± –ø–æ—á–∞—Ç–∏",
      waitingInit: "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É...",
      resizeSuccess: "‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ –¥–æ {width}x{height}",
      paintingPaused: "‚è∏Ô∏è –ú–∞–ª—é–≤–∞–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó X: {x}, Y: {y}"
    }
  };

  const state = {
    running: false,
    imageLoaded: false,
    processing: false,
    totalPixels: 0,
    paintedPixels: 0,
    availableColors: [],
    currentCharges: 0,
    cooldown: CONFIG.COOLDOWN_DEFAULT,
    imageData: null,
    stopFlag: false,
    colorsChecked: false,
    startPosition: null,
    selectingPosition: false,
    region: null,
    minimized: false,
    lastPosition: { x: 0, y: 0 },
    estimatedTime: 0,
    language: 'en'
  };

  function detectLanguage() {
    const userLang = navigator.language.split('-')[0]

    if (TEXTS[userLang]) {
      state.language = userLang;
    }
  }

  const Utils = {
    sleep: ms => new Promise(r => setTimeout(r, ms)),
    
    colorDistance: (a, b) => Math.sqrt(
      Math.pow(a[0] - b[0], 2) + 
      Math.pow(a[1] - b[1], 2) + 
      Math.pow(a[2] - b[2], 2)
    ),
    
    createImageUploader: () => new Promise(resolve => {
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = 'image/png,image/jpeg';
      input.onchange = () => {
        const fr = new FileReader();
        fr.onload = () => resolve(fr.result);
        fr.readAsDataURL(input.files[0]);
      };
      input.click();
    }),
    
    extractAvailableColors: () => {
      const colorElements = document.querySelectorAll('[id^="color-"]');
      return Array.from(colorElements)
        .filter(el => !el.querySelector('svg'))
        .filter(el => {
          const id = parseInt(el.id.replace('color-', ''));
          return id !== 0 && id !== 5;
        })
        .map(el => {
          const id = parseInt(el.id.replace('color-', ''));
          const rgbStr = el.style.backgroundColor.match(/\d+/g);
          const rgb = rgbStr ? rgbStr.map(Number) : [0, 0, 0];
          return { id, rgb };
        });
    },
    
    formatTime: ms => {
      const seconds = Math.floor((ms / 1000) % 60);
      const minutes = Math.floor((ms / (1000 * 60)) % 60);
      const hours = Math.floor((ms / (1000 * 60 * 60)) % 24);
      const days = Math.floor(ms / (1000 * 60 * 60 * 24));
      
      let result = '';
      if (days > 0) result += `${days}d `;
      if (hours > 0 || days > 0) result += `${hours}h `;
      if (minutes > 0 || hours > 0 || days > 0) result += `${minutes}m `;
      result += `${seconds}s`;
      
      return result;
    },
    
    showAlert: (message, type = 'info') => {
      const alert = document.createElement('div');
      alert.style.position = 'fixed';
      alert.style.top = '20px';
      alert.style.left = '50%';
      alert.style.transform = 'translateX(-50%)';
      alert.style.padding = '15px 20px';
      alert.style.background = CONFIG.THEME[type] || CONFIG.THEME.accent;
      alert.style.color = CONFIG.THEME.text;
      alert.style.borderRadius = '5px';
      alert.style.zIndex = '10000';
      alert.style.boxShadow = '0 3px 10px rgba(0,0,0,0.3)';
      alert.style.display = 'flex';
      alert.style.alignItems = 'center';
      alert.style.gap = '10px';
      
      const icons = {
        error: 'exclamation-circle',
        success: 'check-circle',
        warning: 'exclamation-triangle',
        info: 'info-circle'
      };
      
      alert.innerHTML = `
        <i class="fas fa-${icons[type] || 'info-circle'}"></i>
        <span>${message}</span>
      `;
      
      document.body.appendChild(alert);
      
      setTimeout(() => {
        alert.style.opacity = '0';
        alert.style.transition = 'opacity 0.5s';
        setTimeout(() => alert.remove(), 500);
      }, 3000);
    },
    
    calculateEstimatedTime: (remainingPixels, currentCharges, cooldown) => {
      const pixelsPerCharge = currentCharges > 0 ? currentCharges : 0;
      const fullCycles = Math.ceil((remainingPixels - pixelsPerCharge) / Math.max(currentCharges, 1));
      return (fullCycles * cooldown) + ((remainingPixels - 1) * 100);
    },
    
    isWhitePixel: (r, g, b) => {
      return r >= CONFIG.WHITE_THRESHOLD && 
             g >= CONFIG.WHITE_THRESHOLD && 
             b >= CONFIG.WHITE_THRESHOLD;
    },
    
    t: (key, params = {}) => {
      let text = TEXTS[state.language][key] || TEXTS.en[key] || key;
      for (const [k, v] of Object.entries(params)) {
        text = text.replace(`{${k}}`, v);
      }
      return text;
    }
  };

  const WPlaceService = {
    async paintPixelInRegion(regionX, regionY, pixelX, pixelY, color) {
      try {
        const res = await fetch(`https://backend.wplace.live/s0/pixel/${regionX}/${regionY}`, {
          method: 'POST',
          headers: { 'Content-Type': 'text/plain;charset=UTF-8' },
          credentials: 'include',
          body: JSON.stringify({ coords: [pixelX, pixelY], colors: [color] })
        });
        const data = await res.json();
        return data?.painted === 1;
      } catch {
        return false;
      }
    },
    
    async getCharges() {
      try {
        const res = await fetch('https://backend.wplace.live/me', { 
          credentials: 'include' 
        });
        const data = await res.json();
        return { 
          charges: data.charges?.count || 0, 
          cooldown: data.charges?.cooldownMs || CONFIG.COOLDOWN_DEFAULT 
        };
      } catch {
        return { charges: 0, cooldown: CONFIG.COOLDOWN_DEFAULT };
      }
    }
  };

  class ImageProcessor {
    constructor(imageSrc) {
      this.imageSrc = imageSrc;
      this.img = new Image();
      this.canvas = document.createElement('canvas');
      this.ctx = this.canvas.getContext('2d');
      this.previewCanvas = document.createElement('canvas');
      this.previewCtx = this.previewCanvas.getContext('2d');
    }
    
    async load() {
      return new Promise((resolve, reject) => {
        this.img.onload = () => {
          this.canvas.width = this.img.width;
          this.canvas.height = this.img.height;
          this.ctx.drawImage(this.img, 0, 0);
          resolve();
        };
        this.img.onerror = reject;
        this.img.src = this.imageSrc;
      });
    }
    
    getPixelData() {
      return this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height).data;
    }
    
    getDimensions() {
      return { width: this.canvas.width, height: this.canvas.height };
    }
    
    resize(newWidth, newHeight) {
      const tempCanvas = document.createElement('canvas');
      tempCanvas.width = newWidth;
      tempCanvas.height = newHeight;
      const tempCtx = tempCanvas.getContext('2d');
      
      tempCtx.drawImage(this.img, 0, 0, newWidth, newHeight);
      
      this.canvas.width = newWidth;
      this.canvas.height = newHeight;
      this.ctx.drawImage(tempCanvas, 0, 0);
      
      return this.getPixelData();
    }
    
    generatePreview(newWidth, newHeight) {
      this.previewCanvas.width = newWidth;
      this.previewCanvas.height = newHeight;
      this.previewCtx.imageSmoothingEnabled = false;
      this.previewCtx.drawImage(this.img, 0, 0, newWidth, newHeight);
      return this.previewCanvas.toDataURL();
    }
  }

  function findClosestColor(rgb, palette) {
    return palette.reduce((closest, current) => {
      const currentDistance = Utils.colorDistance(rgb, current.rgb);
      return currentDistance < closest.distance 
        ? { color: current, distance: currentDistance } 
        : closest;
    }, { color: palette[0], distance: Utils.colorDistance(rgb, palette[0].rgb) }).color.id;
  }

  async function createUI() {
    detectLanguage();

    const fontAwesome = document.createElement('link');
    fontAwesome.rel = 'stylesheet';
    fontAwesome.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css';
    document.head.appendChild(fontAwesome);

    const style = document.createElement('style');
    style.textContent = `
      @keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(0, 255, 0, 0.7); }
        70% { box-shadow: 0 0 0 10px rgba(0, 255, 0, 0); }
        100% { box-shadow: 0 0 0 0 rgba(0, 255, 0, 0); }
      }
      @keyframes slideIn {
        from { transform: translateY(20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
      }
      #wplace-image-bot-container {
        position: fixed;
        top: 20px;
        right: 20px;
        width: 300px;
        background: ${CONFIG.THEME.primary};
        border: 1px solid ${CONFIG.THEME.accent};
        border-radius: 8px;
        padding: 0;
        box-shadow: 0 5px 15px rgba(0,0,0,0.5);
        z-index: 9998;
        font-family: 'Segoe UI', Roboto, sans-serif;
        color: ${CONFIG.THEME.text};
        animation: slideIn 0.4s ease-out;
        overflow: hidden;
      }
      .wplace-header {
        padding: 12px 15px;
        background: ${CONFIG.THEME.secondary};
        color: ${CONFIG.THEME.highlight};
        font-size: 16px;
        font-weight: 600;
        display: flex;
        justify-content: space-between;
        alig
